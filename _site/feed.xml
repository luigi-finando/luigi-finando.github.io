<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-12-29T03:47:58-02:00</updated><id>http://localhost:4000/</id><title type="html">Luís - Página Pessoal</title><subtitle>Blog de Luís Fernando feito com Jekyll hosting no Github.</subtitle><entry><title type="html">Latex e Git e Dropbox</title><link href="http://localhost:4000/posts/blog/2017/12/28/latex-git-dropbox.html" rel="alternate" type="text/html" title="Latex e Git e Dropbox" /><published>2017-12-28T05:32:35-02:00</published><updated>2017-12-28T05:32:35-02:00</updated><id>http://localhost:4000/posts/blog/2017/12/28/latex-git-dropbox</id><content type="html" xml:base="http://localhost:4000/posts/blog/2017/12/28/latex-git-dropbox.html">Sim, isso mesmo, depois de adotar o *LaTeX* e o *git*, os dias de `versãofinal.doc`, `versãofinal2.docx`, `versaofinal-agoravai.doc` acabaram.

 é um sistema de controle de versão de arquivos. Usado principalmente no desenvolvimento de softwares, é ideal para manter a integridade de projetos baseados em arquivos de texto, como códigos-fonte e... minha tese.

Um segundo projeto do criador o Linux, [Linux Torvalds], o sistema ganha destaque por ser descentralizado, sendo ao mesmo seguro com os dados e flexível quanto às flutuações no código.
A segurança dos dados é garantida pela descentralidade: mesmo que o repositório remoto seja perdido os dados permanecem na árvores de trabalho.
Quanto às flutuações no código, a diferença entre os arquivos de texto é &quot;monitorada&quot;, havendo mecanismos de comparação e mescla de diferenças no texto, mesmo havendo várias árvores de trabalho simultâneas.</content><author><name>Luís</name></author><summary type="html">Sim, isso mesmo, depois de adotar o LaTeX e o git, os dias de versãofinal.doc, versãofinal2.docx, versaofinal-agoravai.doc acabaram.</summary></entry><entry><title type="html">Cheatsheet VIM</title><link href="http://localhost:4000/rascunho/2017/12/26/vim-atalhos-que-mais-uso.html" rel="alternate" type="text/html" title="Cheatsheet VIM" /><published>2017-12-26T05:00:00-02:00</published><updated>2017-12-26T05:00:00-02:00</updated><id>http://localhost:4000/rascunho/2017/12/26/vim-atalhos-que-mais-uso</id><content type="html" xml:base="http://localhost:4000/rascunho/2017/12/26/vim-atalhos-que-mais-uso.html">## modo comando

* acesso com &quot;:&quot; durante *modo normal*
* é a *barra de menu* do vim, juntamente com o *vimrc*
    * comando *w* salva o texto (write)
    * comando *q* sai do editor (quit)
    * comando *e* cria/abre arquivo novo
    * comando *h* oferece ajuda sobre algum comando
    * comando *!* pode executar comandos do shell

## modo normal


```plain
        k
    h - | - l
        j
```

* modo para movimentação

    * *w* próxima palavra
    * *b* palavra anterior
    * *f* movimenta até o caracter na linhas
    * *F* movimenta até caracter antes na linha
    * *{* e *}* para blocos de texto
    * *gg* início do arquivo
    * *G* fim do arquivo
    * *0* primeiro caracter da linha
    * *$* até o último caracter da linha
    * *Ctrl+y* e *Ctrl+e* mover a tela
 
* modo para edição do texto
    * *d* deletar conforme o argumento
    * *dd* - deleta a linha
    * *y* usado para copiar (yank)
    * *yy* copiar a linha toda
    * *p* usado par colar (paste), etc.
    * *pp* cola a linha inteira

* comandos adicionais 
    * *x* deleta um caracter sob o cursor
    * *r* substitui o caracter sob o cursor
    * *~* altera o caracter em maiúsculo/minúsculo
    * *Ctrl+a* incrementa o número (1)
    * *Ctrl+x* decrementa o número (11)
  
  
* comandos seguem a *sintaxe* do vim

  * (número)(ação)

&gt; Frase para exemplos que legal haha

## modo de inserção

* usado para escrever
* i para entrar em inserção
    * *a* entra em inserção depois do caracter
    * *I* entra em inserção no início da linha
    * *A* entra em inserção no final da linha
    * *s* deleta um caracter sob o cursor e entra em inserção
    * *S* deleta a linha e entra em inserção
    * *c* deleta conforme o argumento o entra em inserção
    * *o* cria uma linha abaixo e entra em inserção
    * *O* cria uma linha acima e entra em inserção

* *ESC* para sair da inserção

## modo visual

* seleciona texto em formatos que o modo normal não permita
    * *v* para entrar em modo visual
    * *V* para modo visual line
    * *Ctrl+v* modo visual block

## modo de busca

* */* ou *?* em modo normal para acessar
* *n* ou *N* para percorrer arquivo

## vantagens do vim

* gratuito e de código aberto
* plugins desde linguagem de programação a Tex, e outro formatos plain text    
* escrita em *plain text*, ou seja, sem distrações *sem distrações*
* documentos em plain text são imunes às mudanças nos  editores de texto
* vim é 100% configurável
* macros para edição
    * q q A , Esc k q
* facilita automação para converter documentos
* importante na atualidade, em que textos são distribuídos em formato digital e formatação pode variar</content><author><name>Luís</name></author><summary type="html">modo comando</summary></entry><entry><title type="html">Sobre o VIM</title><link href="http://localhost:4000/blog/2017/12/25/sobre-o-vim.html" rel="alternate" type="text/html" title="Sobre o VIM" /><published>2017-12-25T05:00:00-02:00</published><updated>2017-12-25T05:00:00-02:00</updated><id>http://localhost:4000/blog/2017/12/25/sobre-o-vim</id><content type="html" xml:base="http://localhost:4000/blog/2017/12/25/sobre-o-vim.html">[vi]:https://pt.wikipedia.org/wiki/Vi
[BramMoolenar]:http://www.moolenaar.net/
[unix]:https://pt.wikipedia.org/wiki/Unix
[goyo]:https://github.com/junegunn/goyo.vim
[limelight]:https://github.com/junegunn/limelight.vim
[limegif]:https://camo.githubusercontent.com/fa4e9321be0b4a565ae84a66bae36e97545c101b/68747470733a2f2f7261772e6769746875622e636f6d2f6a756e6567756e6e2f692f6d61737465722f6c696d656c696768742e676966

# Vim 

*VI IMproved* é uma extensão do [vi][vi] criada pelo programador holandês [Bram Moolenar][BramMoolenar], *vim* não precisa se limitar à programação.
Escritores, *bloggers*, jornalistas e estudantes fazem uso do programa, havendo uma série de plugins criados para extender sua funcionalidade nesse sentido.

Pessoalmente, comecei utilizando o vim para editar arquivos de configuração do Linux na linha de comando.
Como um usuário novato, o hábito que o Linux tem pedir que se edite arquivos como usuário *root* era trabalhoso.
Abrir um navegador de arquivos, rolar pela pasta até encontrar o arquivo era um processo irritante.
A busca por um editor na linha de comando ofereceu tanto o Nano quanto o Vim, e eu acabei optei pelo último.

Alguns anos depois, o interesse pela linguagem LaTeX abriu mais oportunidades de usar o editor, agora para a minha redação da minha tese de doutorado.
Melhorei bastante a minha experiência de escrita configurando o máximo que posso o programa com novos atalhos e plugins como [Goyo][goyo] e [Limelight][limelight].

![limegif](https://camo.githubusercontent.com/fa4e9321be0b4a565ae84a66bae36e97545c101b/68747470733a2f2f7261772e6769746875622e636f6d2f6a756e6567756e6e2f692f6d61737465722f6c696d656c696768742e676966)
*Demonstração do plugin limelight no [repositório do desenvolvedor Junegunn][limelight]*

# Esqueça do mouse

Originalmente criado para o sistema operacional [Unix][unix], o *vim* procura seguir a &quot;filosofia&quot; que orientou o desenvolvimento daquele sistema: *cada programa deve cumprir somente uma função e cumpri-la bem*.
Por esse mesmo motivo (desculpe a frase de efeito) o *vim* é ao mesmo tempo limitado e sem limites.

Diferente de editores de texto WYSIWYG, ele trabalha somente com *plain text*.
O programa não é capaz de preparar um texto para impressão.
Não é capaz de criar itálicos, negritos, rodapés, números de página, etc. Essa é a função de programas especializados e das linguagens *markup*.

No entanto, para a redação do texto em si, ou seja, o processo de inserir, apagar e alterar caracteres e palavras, o *vim* é extremamente eficiente.
Sua relação com computadores mais antigos é também responsável por essa eficiência. Tendo em mente um usuário sem mouse.
Todas as funcionalidades do *vim* são acessíveis sem que seja necessário afastar as mãos do *home row* do teclado. Esse fato por si só torna o trabalho com o texto mais rápido.

Não bastasse disso, grande parte da eficiência do *vim* é fruto de sua maior peculiaridade: a modalidade.


# Editor Modal

Quando escrevemos com lápis e papel, nunca nos movimentamos pelo texto com o lápis em contato com a página quando não estamos escrevendo.
Com essa mesma lógica o *vim* possui modos diferentes para a redação e para a edição de um texto já escrito.

Os modos do editor estão na colinha abaixo:

&gt;&gt;&gt;
* **normal** - modo padrão, projetado para a movimentação e edição, acessível com `Esc` ou `Ctrl + [`
* **inserção** - modo para escrita em si, acessível com `i`
* **visual** - modo para a seleção visual, ocorrendo por caractere `v`, por linha `V` ou (mais complicado) por bloco `Ctrl + v`
* **comando** - modo da interface do usuário, com `:`


Ao abrir o programa, o usuário se encontra em modo normal, que é o modo para movimentação e alteração do texto.
Para inserir texto, devemos entra no modo de *inserção*, pressionando a tecla `i`. É nesse modo, e somente nesse modo, que o texto é inserido. Pressionamos `Esc` ou `ctrl + [` para retornarmos ao modo normal.

Toda a interação do usuário com o programa acontece pelo modo de comando, que é acessado pressionando a tecla `:` a partir do modo normal. Comando como sair `:q` ou `:quit`, salvar (*write*) `:w` são passados por meio da linha de comando. Comando mais importante, no entanto, é a ajuda. Ao inserir `:h r`, por exemplo, o programa informa qual a função da tecla r, o mesmo servindo para todas as teclas da *home row* do teclado.

O *vim* ainda apresenta uma série de características interessantes, como a capacidade de concatenar com um sintaxe própria. Pretendo colocar aqui minhas &quot;colinhas&quot; sobre isso.</content><author><name>Luís</name></author><summary type="html"></summary></entry><entry><title type="html">Jekyll e _markdown_</title><link href="http://localhost:4000/blog/2017/12/22/primeiro-post.html" rel="alternate" type="text/html" title="Jekyll e _markdown_" /><published>2017-12-22T15:35:00-02:00</published><updated>2017-12-22T15:35:00-02:00</updated><id>http://localhost:4000/blog/2017/12/22/primeiro-post</id><content type="html" xml:base="http://localhost:4000/blog/2017/12/22/primeiro-post.html">[Markdown]:https://daringfireball.net/projects/markdown/
[Jekyll]:https://jekyllrb.com/docs/home
[Liquid]:https://shopify.github.io/liquid/
[YAML]:yaml.org
[RubyGem]:https://en.wikipedia.org/wiki/RubyGems
[GithubPages]:https://pages.github.com
[Github]:https://www.github.com
[MeuGithub]:https://www.github.com/luigi-finando
[JohnGruber]:https://en.wikipedia.org/wiki/John_Gruber
[mdflavours]:https://en.wikipedia.org/wiki/Markdown#Standardization
[gitmd]:https://github.github.com/gfm/
[repothislink]:https://raw.githubusercontent.com/luigi-finando/luigi-finando.github.io/master/_posts/2017-12-21-primeiro-post.markdown

## Sobre o *markdown*

[Markdown][Markdown] é uma *markup language* como *html* e *LaTeX*, ou seja, a escrita ocorre primeiramente em *plain text* e formatação se dá a partir de marcações convencionadas, quando o código-fonte é compilado. Esse processo é diferente de editores como *Microsoft Word*, *Libreoffice Writer* ou *Pages*, conhecidos como programas *WYSIWYG* (*What you see is what you get*). Editores de texto simples como *Notepad++* e *Vim* permitem um ambiente de escrita mais &quot;limpo&quot; e sem distrações, razão pela qual ela atraiu meu interese.

Foi criada por [John Gruber][JohnGruber] um escritor e blogger americano, com o objetivo de facilitar a escrita e publicação *online*, `Markdown` foi extendida em diversos &quot;[sabores][mdflavours]&quot;, que variam quanto ao processo de compilação e nas convenções de marcação. O &quot;sabor&quot; utilizado aqui é o [Github Flavoured Markdown][gitmd], principalmente pela compilação automática proporcionada pela plataforma, além de oferecer mais recursos no momento da formatação. 

Depois de anos com editores de texto *WYSIWYG*, apesar da &quot;facilidade&quot; superficial, estou convencido de que não são a melhor alternativa para a escrita mais &quot;exigente&quot; como a acadêmica. O contato direto com o texto e a formatação **realmente consistente** de linguagens como a `Markdown` e `LaTeX` tornam impossível retornar ao Word. Ainda mais depois de ter contato com *Vim* (o que é outro assunto).

A convenção para a criação de um parágrafo é deixar uma linha em branco, por exemplo. A fonte destes mesmos parágrafos tem a seguinte aparência:

```plain-text
[Markdown][Markdown] é uma *markup language* como *html* e *LaTeX*, ou seja, a escrita ocorre primeiramente em *plain text* e formatação se dá a partir de marcações convencionadas, quando o código-fonte é compilado. Esse processo é diferente de editores como *Microsoft Word*, *Libreoffice Writer* ou *Pages*, conhecidos como programas *WYSIWYG* (*What you see is what you get*). Editores de texto simples como *Notepad++* e *Vim* permitem um ambiente de escrita mais &quot;limpo&quot; e sem distrações, razão pela qual ela atraiu meu interese.

Foi criada por [John Gruber][JohnGruber] um escritor e blogger americano, com o objetivo de facilitar a escrita e publicação *online*, `Markdown` foi extendida em diversos &quot;[sabores][mdflavours]&quot;, que variam quanto ao processo de compilação e nas convenções de marcação. O &quot;sabor&quot; utilizado aqui é o [Github Flavoured Markdown][gitmd], principalmente pela compilação automática proporcionada pela plataforma, além de oferecer mais recursos no momento da formatação. 
```

Títulos são criados usando o sinal ``#`` e subtítulos são iterações do mesmo sinal repetido, com os subníveis crescendo na mesma medida: 

```plain-text
## Subtítulo
```

&gt; ## Subtítulo

```
### Subsubtítulo
```
&gt; ### Subsubtítulo


Acima destaquei os exemplos utilizando `&gt;`, assim como demarquei blocos de código colocando o trecho entre acentos graves (`` ``). Marcações como **negrito** e *itálico* são possíveis com o uso de arteriscos, e a versão do `markdown` oferecida pelo Github ainda permite o texto ~~tachado~~.

O código fonte deste artigo está disponível publicamente no [meu Github][repothislink].

## A plataforma [Jekyll][Jekyll] e o [Github Pages][GithubPages]

Essa plataforma, instalada como uma [Ruby Gem][RubyGem], é uma combinação de [Liquid][Liquid] e [Markdown][Markdown], sendo uma ferramenta para a geração de *websites* estáticos.

A integração com *markdown* é essencial pois permite que a sintaxe Liquid e o uso de *Frontmatters [YAML][YAML]* automatizem a geração de *htmls* a partir de templates e pedaços de código. 

Ao executar `jekyll new [nome da página]`, Jekyll produz um ambiente de desenvolvimento com uma estrutura de pastas e o arquivo `_config.yml`, permitindo ao usuário inserir criar layout e trechos de HTML reutilizáveis por meio da sintaxe *Liquid*. Como qualquer documento em HTML, é possível que o usuário crie estilos no formato CSS. A pasta `_posts` aceita arquivos no formato *markdown*, convertendo-os para HTML automaticamente no momento da construção do *site*.

A plataforma [Github Pages][GithubPages] oferece a compilação automática do código do Jekyll, bastando sincronizar os arquivos fonte no repositório. A geração deste *blog* é feita quando o código fonte é enviado ao [meu repositório][MeuGithub] no [Github][Github].</content><author><name>Luís</name></author><category term="blog" /><summary type="html"></summary></entry></feed>